#pragma kernel ClearPartitioningCells
#pragma kernel FillPartitioningCells
#pragma kernel FindNeighbours
#pragma kernel CSMain


struct Particle
{
    int id;
    float2 Position;
    float2 PreviousPosition;
    float2 Velocity;
    float2 PosChange;
    int typeNumber;
    float4 Color;
};


// Settings
int _NumParticles;
int _MaxNumParticles;
int _MaxNumNeighbours;
float _AreaMinX;
float _AreaMinY;
float _AreaMaxX;
float _AreaMaxY;
int _MaxNumParticlesPerCell;
float _InteractionRadius;


// Adjusted per frame
float _Time;



RWStructuredBuffer<Particle> _Particles; //Length: MaxNumParticles

// Number of cells: ceil((AreaMaxX - AreaMinX) / InteractionRadius) * ceil((AreaMaxY - AreaMinY) / InteractionRadius)
RWStructuredBuffer<int> _CellParticleCount; // Length: Number of cells
RWStructuredBuffer<int> _ParticlesInCells; //Length:  Number of cells * MaxNumParticlesPerCell
RWStructuredBuffer<int> _ParticleNeighbours; //Length: MaxNumParticles * MaxNumNeighours
RWStructuredBuffer<int> _ParticleNeighbourCount; //Length: MaxNumParticles 





int2 CellCoordinates(in float2 position)
{
    int2 result;
    result.x = floor((position.x-_AreaMinX)/_InteractionRadius);
    result.y = floor((position.y-_AreaMinY)/_InteractionRadius);
    return result;
}

int CellIndex(in float2 position)
{
    if (position.x < _AreaMinX || position.x > _AreaMaxX || 
    position.y < _AreaMinY || position.y > _AreaMaxY)
    {
        return -1;
    }

    int2 coords = CellCoordinates(position);
    return coords.x + coords.y * ceil((_AreaMaxX-_AreaMinX)/_InteractionRadius);
    
}



float rand(in float2 uv)
{
    return (frac(sin(dot(uv, float2(12.9898, 78.233) * 2.0)) * 43758.5453)) * 2 - 1;
}

int numCells()
{
    return ceil((_AreaMaxX-_AreaMinX)/_InteractionRadius) *
        ceil((_AreaMaxY-_AreaMinY)/_InteractionRadius);
}

/*
 *int indexFromId(uint3 id)
{
    return id.x + _CubesPerAxis * (id.y + _CubesPerAxis * id.z);
}
*/

//TODO: Threadien lkm j채rkev채ksi
[numthreads(8,8,1)]
void ClearPartitioningCells (uint3 id : SV_DispatchThreadID)
{
    int index = id.x * 128 + id.y;
    if (index >= numCells()) return;
    _CellParticleCount[index] = 0;
}

//TODO: Threadien lkm j채rkev채ksi
[numthreads(8,8,1)]
void FillPartitioningCells (uint3 id : SV_DispatchThreadID)
{
    const int index = id.x * 128 + id.y;
    if (index >= _NumParticles) return;

    const int cellIndex = CellIndex(_Particles[index].Position);

    if (cellIndex==-1) return;
  
    
    int previousCount = 0;
    InterlockedAdd(_CellParticleCount[cellIndex], 1, previousCount);
    if (previousCount >= _MaxNumParticlesPerCell)
    {
        return;
    }
  
    _ParticlesInCells[cellIndex * _MaxNumParticlesPerCell + previousCount] = index;

}

[numthreads(8,8,1)]
void FindNeighbours (uint3 id : SV_DispatchThreadID)
{
    int particleIndex = id.x * 128 + id.y;
    if (particleIndex >= _NumParticles) return;
    
    int count = 0;
   
    for (int x=-1; x<=1; x++)
    {
        for (int y=-1; y<=1; y++)
        {
            int cellIndex = CellIndex(_Particles[particleIndex].Position + float2(x*_InteractionRadius, y*_InteractionRadius));
            if (cellIndex == -1) continue;

            for (int i=0; i<_CellParticleCount[cellIndex]; i++)
            {
                if (i==_MaxNumParticlesPerCell) break;

                int otherParticleIndex = _ParticlesInCells[cellIndex * _MaxNumParticlesPerCell + i];
                if (otherParticleIndex == particleIndex) continue;
                if (length(_Particles[particleIndex].Position - _Particles[otherParticleIndex].Position) < _InteractionRadius)
                {
                    _ParticleNeighbours[particleIndex * _MaxNumNeighbours + count] = otherParticleIndex;
                    count = count + 1;
                }
            }
        }
    }

    _ParticleNeighbourCount[particleIndex] = count;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = id.x * 128 + id.y;

    if (index >= _NumParticles)
    {
        return;
    }

    _Particles[index].Velocity = float2(0.0, 50.0);
 
}
/*
[numthreads(8,8,1)]
void SecondPhase (uint3 id : SV_DispatchThreadID)
{
    // Check if id is in the grid
    if (id.x > _CubesPerAxis - 1 || id.y > _CubesPerAxis - 1)
    {
        return;
    }

    
    int index = indexFromId(id);
    if (_Particles[index].alive == 1)
    {
        _Particles[index].alive = 0;
    }
        
}*/



