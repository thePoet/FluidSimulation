// Compute shader for particle based fluid dynamics.
// Based on paper by Simon Clavet, Philippe Beaudoin, and Pierre Poulin
// https://www.academia.edu/452554/Particle-Based_Viscoelastic_Fluid_Simulation

#include "FluidDynamicsCommon.hlsl"


// TODO: Säädä mallia siten, että törmäyksissä voidaan muuttaa nopeutta

// The computation phases:

#pragma kernel ApplyGravity                         
#pragma kernel ClearPartitioningCells              
#pragma kernel FillPartitioningCells                
#pragma kernel FindNeighbours                      
#pragma kernel CalculateViscosity                   
#pragma kernel ApplyViscosity                      
#pragma kernel ApplyVelocity                        
                                                   
                                                    
#pragma kernel CalculatePressures                   
#pragma kernel CalculateDensityDisplacement         
#pragma kernel CalculateCollisionDisplacement       
#pragma kernel ApplyDisplacement                    
#pragma kernel ConfineParticlesToArea
#pragma kernel CalculateVelocityBasedOnMovement



struct Particle
{
    int id;
    float2 Position;
    float2 Velocity;
    int fluidIdx;
};

struct TempParticleData
{
    float2 PositionChange;
    float2 VelocityChange;
    float2 PreviousPosition;
    float Pressure;
    float NearPressure;
};

struct Fluid
{
    int State; // 0 = liquid, 1 = gas, 2 = solid
    float Stiffness;
    float NearStiffness;
    float RestDensity;
    float ViscositySigma;
    float ViscosityBeta;
    float GravityScale;
    float Mass;
};

// Settings
int _NumParticles;
int _MaxNumParticles;
int _MaxNumNeighbours;
int _MaxNumParticlesPerCell;
float _InteractionRadius;
float _Gravity;
float _Drag;
float _SolidRadius;
float _MaxDisplacement;

float _AreaMinX;
float _AreaMinY;
float _AreaMaxX;
float _AreaMaxY;

float _DeltaTime;

float _Time = 0;
// Error flags

static const int ERROR_CELL_OVERFLOW = 0;
static const int ERROR_OUTSIDE_AREA = 1;
static const int ERROR_MAX_DENSITY_DISPLACEMENT = 2;
static const int WARNING_INSIDE_SOLID = 3;
static const float EPSILON = 0.00001;

RWStructuredBuffer<Particle> _Particles; //Length: MaxNumParticles
RWStructuredBuffer<TempParticleData> _TempParticleData; 
// Number of cells: ceil((AreaMaxX - AreaMinX) / InteractionRadius) * ceil((AreaMaxY - AreaMinY) / InteractionRadius)
RWStructuredBuffer<int> _CellParticleCount; // Length: Number of cells
RWStructuredBuffer<int> _ParticlesInCells; //Length:  Number of cells * MaxNumParticlesPerCell
RWStructuredBuffer<int> _ParticleNeighbours; //Length: MaxNumParticles * MaxNumNeighbours
RWStructuredBuffer<int> _ParticleNeighbourCount; //Length: MaxNumParticles 
//RWStructuredBuffer<float2> _ChangeBuffer; //Length: MaxNumParticles * MaxNumNeighbours
RWStructuredBuffer<int> _Stats; //Length: 10 
RWStructuredBuffer<float2> _Debug; //Length: 5 
RWStructuredBuffer<Fluid> _Fluids; 


// --------------------- UTILITY FUNCTIONS ---------------------

// Distance between particles compared to interaction radius 0..1
float QDistance(int particle1, int particle2)
{
    return length(_Particles[particle1].Position - _Particles[particle2].Position) / _InteractionRadius;
}

Fluid FluidOf(int particleIdx)
{
    return _Fluids[_Particles[particleIdx].fluidIdx];
}

bool IsLiquid(int particleIdx)
{
    return FluidOf(particleIdx).State == 0;
}

bool IsGas(int particleIdx)
{
    return FluidOf(particleIdx).State == 1;
}

bool IsSolid(int particleIdx)
{
    return FluidOf(particleIdx).State == 2;
}

bool IsFluid(int particleIdx)
{
    return FluidOf(particleIdx).State != 2;
}

// ---------------------------------

bool IsOutsideArea(float2 position)
{
    float2 minCorner = float2(_AreaMinX, _AreaMinY);
    float2 maxCorner = float2(_AreaMaxX, _AreaMaxY);
    return IsInsideBox(position, minCorner, maxCorner); 
}

float2 AreaBoundsDisplacement(float2 particlePosition, out float addedDrag)
{
    float2 result = float2(0.0, 0.0);
    float margin = 10;
    addedDrag = 0;
    
    float2 minCornerSoft = float2(_AreaMinX + margin, _AreaMinY + margin);
    float2 maxCornerSoft = float2(_AreaMaxX - margin, _AreaMaxY - margin);

    if (IsInsideBox(particlePosition, minCornerSoft, maxCornerSoft)) return result; 

    addedDrag = 0.5;
    float softness = 0.5;
    float2 newPos = ClampToBox(particlePosition, float2(_AreaMinX+EPSILON,_AreaMinY+EPSILON), float2(_AreaMaxX-EPSILON,_AreaMaxY-EPSILON));

    if (newPos.x < minCornerSoft.x)
    {
        newPos.x = lerp(newPos.x, minCornerSoft.x, softness);
    }
    if (newPos.x > maxCornerSoft.x)
    {
        newPos.x = lerp(newPos.x, maxCornerSoft.x, softness);
    }
    if (newPos.y < minCornerSoft.y)
    {
        newPos.y = lerp(newPos.y, minCornerSoft.y, softness);
    }
    if (newPos.y > maxCornerSoft.y)
    {
        newPos.y = lerp(newPos.y, maxCornerSoft.y, softness);
    }
    return newPos - particlePosition;
}



// TODO: törmäyksen normaali tai nopeuskorjaus ulos tästä funktiosta

bool TestSolidCollisions(in int particleIdx, in float2 start, in float2 goal, out float2 reached, out float2 collisionNormal)
{
    bool collisionHappened = false;
    reached = goal;
    float2 collisionPoint;
    
    for (int j=0; j<_ParticleNeighbourCount[particleIdx]; j++)
    {
        int neighbourIndex = _ParticleNeighbours[particleIdx * _MaxNumNeighbours + j];
        if (!IsSolid(neighbourIndex) ) continue;

        float2 neighbourPos = _Particles[neighbourIndex].Position;


        //TODO:mitä jos ollaan samaan aikaan kahden sisällä?
        // TODO: epsilon-case
        float2 toNeighbour = neighbourPos-start; 
        if (length(toNeighbour) < _SolidRadius)
        {
            // If we start inside particle, we'll take shortest route out:
            _Stats[WARNING_INSIDE_SOLID] += 1;
            reached = neighbourPos - normalize(toNeighbour) * (_SolidRadius + EPSILON);
            collisionNormal = -toNeighbour;
            collisionHappened = true;
            break;
        }
        
        if (LineSegmentCircleIntersection(neighbourPos, _SolidRadius, start, reached, collisionPoint))
        {
            float margin = _SolidRadius/100.0;
            reached = collisionPoint - margin * normalize(reached-start);
            collisionNormal = normalize(collisionPoint-neighbourPos);
         //  collisionNormal = normalize(float2(-1, 1));
            collisionHappened = true;
        }
    }
    return collisionHappened;

}

// --------------------- GRAVITY------------------------------------------ ---------------------
[numthreads(8,8,1)]
void ApplyGravity (uint3 id : SV_DispatchThreadID) // AND initialize stuff 
{
    int particleIndex = id.x * 128 + id.y;
    if (particleIndex==0) _Time += _DeltaTime;
    
    if (particleIndex >= _NumParticles) return;
    _TempParticleData[particleIndex].PreviousPosition = _Particles[particleIndex].Position;
    _TempParticleData[particleIndex].PositionChange = float2(0, 0);
    _TempParticleData[particleIndex].VelocityChange = float2(0, 0);

    if (IsSolid(particleIndex)) return;
    _Particles[particleIndex].Velocity += float2(0.0, -_DeltaTime * _Gravity * FluidOf(particleIndex).GravityScale);
}

// ------------- SPATIAL PARTITIONING ----------------------------------------------------------------



int2 CellCoordinates(in float2 position)
{
    int2 result;
    result.x = floor((position.x-_AreaMinX)/_InteractionRadius);
    result.y = floor((position.y-_AreaMinY)/_InteractionRadius);
    return result;
}

int CellIndex(in float2 position)
{
    int index = -1;
    
    if (position.x >= _AreaMinX && position.x <= _AreaMaxX && position.y >= _AreaMinY && position.y <= _AreaMaxY)
    {
        int2 coords = CellCoordinates(position);
        index = coords.x + coords.y * ceil((_AreaMaxX-_AreaMinX)/_InteractionRadius);
    }
    return index;
}

bool IsInsideArea(float2 position)
{
    return position.x >= _AreaMinX && position.x <= _AreaMaxX && position.y >= _AreaMinY && position.y <= _AreaMaxY;
}



int NumCells()
{
    return ceil((_AreaMaxX-_AreaMinX)/_InteractionRadius) *
        ceil((_AreaMaxY-_AreaMinY)/_InteractionRadius);
}





[numthreads(8,8,1)]
void ClearPartitioningCells (uint3 id : SV_DispatchThreadID)
{
    int index = id.x * 128 + id.y;
    if (index >= NumCells()) return;
    _CellParticleCount[index] = 0;

    // Set error flags to zero
/*
    if (index==0)
    {
        for (int i=0; i<10; i++)
            _Stats[i] = 0;
    }*/
}


[numthreads(8,8,1)]
void FillPartitioningCells (uint3 id : SV_DispatchThreadID)
{
    const int index = id.x * 128 + id.y;
    if (index >= _NumParticles) return;

    const int cellIndex = CellIndex(_Particles[index].Position);

    if (cellIndex==-1)
    {
        _Stats[ERROR_OUTSIDE_AREA] += 1;
        return;
    }
  
    int previousCount = 0;
    InterlockedAdd(_CellParticleCount[cellIndex], 1, previousCount);
    if (previousCount >= _MaxNumParticlesPerCell)
    {
        _Stats[ERROR_CELL_OVERFLOW] += 1;
        return;
    }

    _ParticlesInCells[cellIndex * _MaxNumParticlesPerCell + previousCount] = index;
}

// ----------------- Neighbour Finding -----------------


[numthreads(8,8,1)]
void FindNeighbours (uint3 id : SV_DispatchThreadID)
{
    int particleIndex = id.x * 128 + id.y;
    if (particleIndex >= _NumParticles) return;
    
    int count = 0;
   
    for (int x=-1; x<=1; x++)
    {
        for (int y=-1; y<=1; y++)
        {
            int cellIndex = CellIndex(_Particles[particleIndex].Position + float2(x*_InteractionRadius, y*_InteractionRadius));
            if (cellIndex == -1) continue;

            for (int i=0; i<_CellParticleCount[cellIndex]; i++)
            {
                if (i==_MaxNumParticlesPerCell) break;

                int otherParticleIndex = _ParticlesInCells[cellIndex * _MaxNumParticlesPerCell + i];
                if (otherParticleIndex == particleIndex) continue;
                if (length(_Particles[particleIndex].Position - _Particles[otherParticleIndex].Position) < _InteractionRadius)
                {
                    _ParticleNeighbours[particleIndex * _MaxNumNeighbours + count] = otherParticleIndex;
                    count = count + 1;
                }
            }
        }
    }

    _ParticleNeighbourCount[particleIndex] = count;
}

bool IsInDifferentState(int particle1, int particle2)
{
    return _Fluids[_Particles[particle1].fluidIdx].State != _Fluids[_Particles[particle2].fluidIdx].State;
}


float2 ViscosityImpulse(int particle1, int particle2)
{
    float2 impulse = float2(0,0);
    
    if (!IsSolid(particle1) && !IsSolid(particle2) )
    {
        int fluidIdx = _Particles[particle1].fluidIdx;
        float sigma = _Fluids[fluidIdx].ViscositySigma;
        float beta = _Fluids[fluidIdx].ViscosityBeta;


        float q = QDistance(particle1, particle2);

        if (q>0.000001 && q < 1)
        {
            float2 r = normalize(_Particles[particle1].Position - _Particles[particle2].Position);
            float u = dot(_Particles[particle1].Velocity - _Particles[particle2].Velocity, r);
            if (u > 0)  impulse =  _DeltaTime * (1 - q) * (sigma * u + beta * u * u) * r;
        }
    }

    return impulse;
}


[numthreads(8,8,1)]
void CalculateViscosity (uint3 id : SV_DispatchThreadID)
{
    int particleIndex = id.x * 128 + id.y;
    if (particleIndex >= _NumParticles) return;
    
    for (int i=0; i<_ParticleNeighbourCount[particleIndex]; i++)
    {
        int neighbourIndex = _ParticleNeighbours[particleIndex * _MaxNumNeighbours + i];
        float2 impulse = ViscosityImpulse(particleIndex, neighbourIndex);
        _TempParticleData[particleIndex].VelocityChange += -impulse * 0.5;
   }
}

[numthreads(8,8,1)]
void ApplyViscosity (uint3 id : SV_DispatchThreadID)
{
    int particleIndex = id.x * 128 + id.y;
    if (particleIndex >= _NumParticles) return;
    _Particles[particleIndex].Velocity += _TempParticleData[particleIndex].VelocityChange;
}

[numthreads(8,8,1)]
void ApplyVelocity (uint3 id : SV_DispatchThreadID)
{
    int particleIdx = id.x * 128 + id.y;
    if (particleIdx >= _NumParticles) return;
    if (IsSolid(particleIdx)) return;
    
    _TempParticleData[particleIdx].PositionChange += _Particles[particleIdx].Velocity * _DeltaTime;
}

[numthreads(8,8,1)]
void CalculatePressures (uint3 id : SV_DispatchThreadID)
{
    int particleIndex = id.x * 128 + id.y;
    if (particleIndex >= _NumParticles) return;

    int fluidIndex = _Particles[particleIndex].fluidIdx;

    
    const float restDensity = _Fluids[fluidIndex].RestDensity;
    const float stiffness = _Fluids[fluidIndex].Stiffness;
    const float nearStiffness = _Fluids[fluidIndex].NearStiffness;

    float density = 0;
    float nearDensity = 0;
    
    for (int i=0; i<_ParticleNeighbourCount[particleIndex]; i++)
    {
        int neighbourIndex = _ParticleNeighbours[particleIndex * _MaxNumNeighbours + i];
       // if (IsSolid(neighbourIndex)) continue;
        float q = QDistance(particleIndex, neighbourIndex);
        if (q<1)
        {
            density += (1-q) * (1-q);
            nearDensity += (1-q) * (1-q) * (1-q);   
        }
    }
    _TempParticleData[particleIndex].Pressure = stiffness * (density - restDensity);
    _TempParticleData[particleIndex].NearPressure = nearStiffness * nearDensity;
}

// Returns the movement caused by fluid density at particle1
// Direction towards particle2 if pressure at partivle1 is high.
float2 DensityDisplacement(int particle1, int particle2)
{
    float q = QDistance(particle1, particle2);
    float2 fromTo = _Particles[particle2].Position - _Particles[particle1].Position;

    float2 displacement = float2(0.0, 0.0);

    if (length(fromTo) < EPSILON) // If particles are extremely close...
    {
        // ...move them in random direction.
        displacement =  RandomFloat2(float2(particle1, _Time)) * 2 * EPSILON;
    }
    else if (q<1)
    {
        float pressure = _TempParticleData[particle1].Pressure;
        float nearPressure = _TempParticleData[particle1].NearPressure;
   
        float2 d = _DeltaTime * _DeltaTime * (pressure * (1 - q) + nearPressure * (1 - q) * (1 - q)) *
                        normalize(fromTo);

        d = d * FluidOf(particle2).Mass / FluidOf(particle1).Mass;

       // if (pressure>0)
            displacement =  0.5 * d;
        
    }
    return displacement;
}


[numthreads(8,8,1)]
void CalculateDensityDisplacement (uint3 id : SV_DispatchThreadID)
{
    int particleIndex = id.x * 128 + id.y;
    if (particleIndex >= _NumParticles) return;
    
   // _TempParticleData[particleIndex].PositionChange = float2(0,0);

    if (IsSolid(particleIndex) ) return;

    for (int j=0; j<_ParticleNeighbourCount[particleIndex]; j++)
    {
        int neighbourIndex = _ParticleNeighbours[particleIndex * _MaxNumNeighbours + j];


        if (IsFluid(neighbourIndex) )
        {
            _TempParticleData[particleIndex].PositionChange -= DensityDisplacement(particleIndex, neighbourIndex);
            _TempParticleData[particleIndex].PositionChange += DensityDisplacement(neighbourIndex, particleIndex);
        }
    }
    
}




[numthreads(8,8,1)]
void CalculateCollisionDisplacement (uint3 id : SV_DispatchThreadID)
{
    int particleIdx = id.x * 128 + id.y;
    if (particleIdx >= _NumParticles) return;

    if (IsSolid(particleIdx)) return;

    /*
    float2 reached;

    // Adjust the PositionChanges magnitude so that we don't end up inside solids
    TestSolidCollisions(particleIdx, _Particles[particleIdx].Position, 
        _Particles[particleIdx].Position + _TempParticleData[particleIdx].PositionChange,
        reached);

    _TempParticleData[particleIdx].PositionChange = reached - _Particles[particleIdx].Position;
*/
    
}


[numthreads(8,8,1)]
void ApplyDisplacement (uint3 id : SV_DispatchThreadID)
{
    /*
    int particleIndex = id.x * 128 + id.y;
    if (particleIndex >= _NumParticles) return;

    if (IsSolid(particleIndex)) return;

    float2 posChange = CapMagnitude(_TempParticleData[particleIndex].PositionChange, _MaxDisplacement);
    _Particles[particleIndex].Position += posChange;*/
}




[numthreads(8,8,1)]
void ConfineParticlesToArea (uint3 id : SV_DispatchThreadID)
{/*
    int i = id.x * 128 + id.y;
    if (i >= _NumParticles) return;
    if (IsSolid(i)) return;

    _Particles[i].Position += AreaBoundsDisplacement(_Particles[i].Position);*/
}

// --- RESOLVE STEP ---             

[numthreads(8,8,1)]
void CalculateVelocityBasedOnMovement(uint3 id : SV_DispatchThreadID)
{
    int i = id.x * 128 + id.y;
    if (i >= _NumParticles) return;
    
    if (IsSolid(i)) return;
    

    float2 reached;
    float2 positionChange = CapMagnitude(_TempParticleData[i].PositionChange, _MaxDisplacement);
    float2 collisionNormal;
    float2 preCollisionVelocity = positionChange / _DeltaTime;

    
    bool collisionHappened = TestSolidCollisions(i, _Particles[i].Position, 
        _Particles[i].Position + positionChange,
        reached, collisionNormal);
  

    positionChange = reached - _Particles[i].Position;

    float addedDrag;
    
    _Particles[i].Position += positionChange;
    _Particles[i].Position += AreaBoundsDisplacement(_Particles[i].Position, addedDrag);

    
    _Particles[i].Velocity = (_Particles[i].Position - _TempParticleData[i].PreviousPosition) / _DeltaTime;
    if (collisionHappened)
    {
        _Particles[i].Velocity = VelocityAfterCollision(preCollisionVelocity, collisionNormal, 0.05, 0.95);
        _Debug[0] = _Particles[i].Velocity;
    }

    
    // Apply Drag
    if (length(_Particles[i].Velocity) < 0.0001) return;
    float drag = length(_Particles[i].Velocity) * length(_Particles[i].Velocity) * (_Drag+addedDrag) * _DeltaTime;
    _Particles[i].Velocity -= normalize(_Particles[i].Velocity) * drag;
    
}
